//import org.aspectj.bridge.IMessage
//import org.aspectj.bridge.MessageHandler
//import org.aspectj.tools.ajc.Main

apply plugin: 'com.android.application'
//apply plugin: 'com.neenbedankt.android-apt'
//apply plugin: 'com.uphyca.android-aspectj' //it does not work with databinding


buildscript {
    repositories {
        jcenter()
    }
    dependencies {
//        classpath 'org.aspectj:aspectjtools:1.8.9'
//        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
    }

}

repositories {
    jcenter()
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        multiDexEnabled false
        resConfigs "zh", "en"  //, "xxhdpi" 加了xxhdpi就无法编译  failed to execute aapt，可能这个目录资源不全
        ndk {
            abiFilters "armeabi", "armeabi-v7a"
        }
    }


    dataBinding {
        enabled = true
    }

    lintOptions {
        abortOnError rootProject.ext.abortOnLintError
        checkReleaseBuilds rootProject.ext.checkLintRelease
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles 'proguard-rules.pro'
            shrinkResources true
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    dexOptions {
        javaMaxHeapSize "4g"
    }

    aaptOptions {
        cruncherEnabled = true
//        useNewCruncher = true
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
//    compile project(':aspectj')

    implementation project(':support')

    implementation 'com.squareup.okhttp3:okhttp:3.8.1'
    implementation 'com.google.code.gson:gson:2.8.0'

    implementation 'io.reactivex.rxjava2:rxjava:2.1.3'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'

    implementation 'com.facebook.stetho:stetho:1.3.1'
    implementation 'com.facebook.stetho:stetho-okhttp3:1.3.1'

    api 'com.android.support:support-v4:26.1.0'
    api 'com.android.support:appcompat-v7:26.1.0'
    api 'com.android.support:cardview-v7:26.1.0'
    api 'com.android.support:recyclerview-v7:26.1.0'

    implementation "com.android.support:exifinterface:26.1.0"

    implementation 'com.android.support:design:26.1.0'
    implementation 'com.android.support:palette-v7:26.1.0'

    implementation 'com.android.support.constraint:constraint-layout:1.0.2' //需要使用as自带的sdk安装，android那个老的不行，看不到

    implementation 'com.squareup.retrofit2:retrofit:2.3.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.3.0'

    implementation 'com.github.bumptech.glide:glide:4.0.0'

    implementation 'com.jakewharton.threetenabp:threetenabp:1.0.3'

    annotationProcessor "com.google.dagger:dagger-compiler:2.4"
    implementation 'com.google.dagger:dagger:2.4'

    compileOnly 'org.glassfish:javax.annotation:10.0-b28'

    implementation 'org.java-websocket:Java-WebSocket:1.3.0'

    implementation 'in.srain.cube:ultra-ptr:1.0.11'

    implementation 'com.evernote:android-job:1.1.8'

    implementation 'org.tensorflow:tensorflow-android:1.2.0'

//    implementation 'top.zibin:Luban:1.1.2'

//    implementation 'id.zelory:compressor:2.1.0'
}

// If you use each() to iterate through the variant objects,
// you need to start using all(). That's because each() iterates
// through only the objects that already exist during configuration time—
// but those object don't exist at configuration time with the new model.
// However, all() adapts to the new model by picking up object as they are
// added during execution.
android.applicationVariants.all { variant ->
    variant.outputs.all {
//        outputFileName = "${variant.name}-${variant.versionName}.apk"
        outputFileName = "KaiPractice-${variant.buildType.name}-${variant.versionName}.apk"
    }
}

//final def log = project.logger
//final def variants = project.android.applicationVariants
//
//variants.all { variant ->
//    if (!variant.buildType.isDebuggable()) {
//        log.debug("Skipping non-debuggable build type '${variant.buildType.name}'.")
//        return;
//    }
//
//    JavaCompile javaCompile = variant.javaCompile
//    javaCompile.doLast {
//        String[] args = ["-showWeaveInfo",
//                         "-1.5",
//                         "-inpath", javaCompile.destinationDir.toString(),
//                         "-aspectpath", javaCompile.classpath.asPath,
//                         "-d", javaCompile.destinationDir.toString(),
//                         "-classpath", javaCompile.classpath.asPath,
//                         "-bootclasspath", project.android.bootClasspath.join(File.pathSeparator)]
//        log.debug "ajc args: " + Arrays.toString(args)
//
//        MessageHandler handler = new MessageHandler(true);
//        new Main().run(args, handler);
//        for (IMessage message : handler.getMessages(null, true)) {
//            switch (message.getKind()) {
//                case IMessage.ABORT:
//                case IMessage.ERROR:
//                case IMessage.FAIL:
//                    log.error message.message, message.thrown
//                    break;
//                case IMessage.WARNING:
//                    log.warn message.message, message.thrown
//                    break;
//                case IMessage.INFO:
//                    log.info message.message, message.thrown
//                    break;
//                case IMessage.DEBUG:
//                    log.debug message.message, message.thrown
//                    break;
//            }
//        }
//    }
//}
